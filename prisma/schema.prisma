generator client {
	provider        = "prisma-client-js"
	previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
	provider          = "postgresql"
	url               = env("POSTGRES_PRISMA_URL")
	directUrl         = env("POSTGRES_URL_NON_POOLING")
	shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
	extensions        = [postgis]
}

// Notice:
// - some tables have (onUpdate: Cascade, onDelete: Cascade) when the parent is soft-deletable (deletedAt)
// - (onUpdate: Cascade) is set explicitly for clarity
// - prices are expressed in minor currency, no decimals are present
// - gen_random_uuid() is the native pgcrypto ext from postgres, it generates version 4 UUIDs which are non-sortable

// TODO Analyze (onUpdate: Cascade, onDelete: Cascade) on all tables

// region: User

/// A simple user role
enum UserRole {
	/// The user have no role, this is the default value.
	NONE
	/// The user is a host and can edit it's own properties
	HOST
	/// The user is an administrator and have full access to the system.
	ADMIN
}

enum UserStatus {
	NONE

	/// The user is banned and cannot use the application.
	BANNED
}

// The user model
model User {
	id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

	/// The user primary email
	/// ## Note, email are lowercased, there's a chance the email provider is case-sensitive, in that case the user will never receive the email
	///
	/// @email @max(255)
	email String @unique @db.VarChar(255)

	emailVerifiedAt DateTime?

	/// The user nickname, the user can change it at any time, this field is **not** unique
	///
	/// @max(255)
	//  name String @db.VarChar(255)

	/// The user avatar url
	///
	/// @url
	image String?

	/// The user first name
	///
	/// @max(255)
	firstName String? @db.VarChar(255)
	/// The user last name
	///
	/// @max(255)
	lastName  String? @db.VarChar(255)

	/// The user phone number
	///
	/// @phone(255)
	//  phone String? @db.VarChar(255)

	//  phoneVerifiedAt DateTime?

	/// True when the phone number is fake
	//  phoneMarkedAsInvalid Boolean?

	//  documentVerifiedAt DateTime?

	/// The user role.
	role UserRole @default(NONE)

	status UserStatus @default(NONE)

	//  lastActivityAt DateTime?
	//  lastLoginAt    DateTime?

	createdAt DateTime  @unique @default(now())
	updatedAt DateTime  @default(now()) @updatedAt
	bannedAt  DateTime?
	deletedAt DateTime?

	/// The user password credentials
	credentials Credentials?

	/// The Time-based One-time Password token
	//  totp                    TOTPToken?
	accounts Account[]
	sessions Session[]
	//  passwordResetTokens     PasswordResetToken[]
	//  emailVerificationTokens EmailVerificationToken[]
	//  identificationRequests  UserIdentificationRequest?

	/// The user locations if it's an host
	locations Location[]

	/// The {@link Location} data relative to the user, such as favorite locations.
	locationData UserLocationData[]

	reservations Reservation[]

	orders Order[] @relation("Bought")
	// soldOrders Order[] @relation("Seller")

	orderNotes OrderNote[]
	// createdOrderInstallments OrderInstallment[]

	// billing details
	//  billing UserBillingData?
	@@index(createdAt)
}

// endregion: User

// region: User credentials

model Account {
	id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

	type String

	/// The {@link User} id.
	userId String @db.Uuid

	/// TODO DOC
	provider          String
	/// TODO DOC Maybe The {@link AccountProvider}.
	providerAccountId String

	refreshToken String?
	accessToken  String?
	expiresAt    Int?
	tokenType    String?
	scope        String?
	idToken      String?
	sessionState String?

	/// The {@link Account} creation date.
	createdAt DateTime @default(now())
	user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

	// TODO Should add @@index(userId)?
	@@unique([provider, providerAccountId], name: "providerProviderAccountId")
}

// Note: only one password credentials is allowed per user
model Credentials {
	/// The {@link User} id.
	id String @id @db.Uuid

	/// The password hash
	password String

	createdAt DateTime @default(now())
	updatedAt DateTime @default(now()) @updatedAt

	user User @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

/// The {@link User} session, a user might maintain multiple sessions at any given time.
model Session {
	id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
	/// The {@link User} id.
	userId       String @db.Uuid
	/// The {@link Session} unique token, intended to be stored in a cookie.
	sessionToken String @unique

	/// The session pool
	//  pool String

	/// The session ip, used to check whether the session has been hijacked
	//  ip String

	/// The session user agent, used to check whether the session has been hijacked
	//  userAgent String

	/// The session expiration date, after this date, the session is considered invalid, and it will be removed from the database at a later time..
	expiresAt DateTime

	/// The {@link Session} creation date.
	createdAt DateTime @default(now())

	/// The {@link Session} last update date.
	updatedAt DateTime @default(now()) @updatedAt

	//  expires      DateTime
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model VerificationToken {
//  token String @id
//
//  identifier String
//  expiresAt  DateTime
//
//  createdAt DateTime @default(now())
//  updatedAt DateTime @default(now()) @updatedAt
//
//  @@unique([identifier, token])
//}

// TODO model EmailVerificationToken

// TODO model PasswordResetToken

// endregion: User credentials

// TODO Evaluate where to use soft deletition on following models
// TODO Add: createdAt DateTime @default(now()) updatedAt DateTime @default(now()) @updatedAt

/// The {@link Location} position, this support only one level like a city, this schema does not support nested positions.
model LocationPosition {
	id String @id

	/// The {@link LocationType} creation date.
	createdAt DateTime @default(now())
	/// The {@link LocationType} last update date.
	updatedAt DateTime @default(now()) @updatedAt

	locations Location[]
}

/// The {@link Location} type (restaurant, office, etc..), this is a table and not an enum to allow addition at runtime.
model LocationType {
	id String @id

	/// The {@link LocationType} creation date.
	createdAt DateTime @default(now())
	/// The {@link LocationType} last update date.
	updatedAt DateTime @default(now()) @updatedAt

	locations Location[]
}

/// The Location model
model Location {
	id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

	/// The {@link User} id.
	userId String @db.Uuid

	/// The location displayed name.
	displayName String

	/// The location description.
	description String

	/// The location lowercased hypened url slug key (ex. ney-york-joe-rage-room).
	/// ## NOTE: Do not use in the application, this is added or future use.
	key String @default(dbgenerated("gen_random_uuid()"))

	/// The location geopsatial data.
	geoData LocationGeoData?

	/// The location predeterminate position (for now only italian cities)
	positionId String

	/// The location display address.
	address String

	/// The location photos as an imgUrl.
	photos String[]

	/// The {@link LocationType}.
	typeId String

	/// The {@link LocationRate}.
	/// TODO Decide if a Location can have multiple rates.
	rates LocationRate[]

	/// The {@link Service} offered by the location.
	services LocationService[]

	reservations Reservation[]

	/// The {@link User} data relative to the location, such as favorite locations.
	userData UserLocationData[]

	/// The {@link Location} creation date.
	createdAt DateTime  @unique @default(now())
	/// The {@link Location} last update date.
	updatedAt DateTime  @default(now()) @updatedAt
	/// The {@link Location} deletition date for soft deletition.
	deletedAt DateTime?

	user     User             @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
	position LocationPosition @relation(fields: [positionId], references: [id], onUpdate: Cascade, onDelete: Restrict)
	type     LocationType     @relation(fields: [typeId], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

/// The {@link Location} geospatial data.
/// The two models are separated to allow the creation of a {@link Location} with the prisma api,
/// prisma is unable to create models with unsupported types.
model LocationGeoData {
	/// The {@link LocationGeoData} and {@link Location} id, the same id is used for convenience.
	id String @id @db.Uuid

	/// The location geopsatial longitude and latitude.
	lngLat Unsupported("geometry(Point, 3857)")

	location Location @relation(fields: [id], references: [id])

	@@index([lngLat], name: "locationGeoDataLngLat", type: Gist)
}

/// The interval that determines the billing cicle.
enum RateInterval {
	DAY
	WEEK
	MONTH
	YEAR
}

/// The {@link Location} payment rate, TODO Define if a Location can have multiple rates.
/// LocationRates should be immutable, edit should not be supported.
model LocationRate {
	id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

	/// The {@link Location} id.
	locationId String @db.Uuid

	/// The price given for each interval.
	price Int

	/// The quantity of intervals that must elapse before the next charge.
	quantity Int

	/// The {@link RateInterval} that determines the billing cicle.
	interval RateInterval

	/// The {@link LocationRate} creation date.
	createdAt DateTime  @unique @default(now())
	/// The {@link LocationRate} deletition date for soft deletition.
	deletedAt DateTime?

	location Location @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

/// The service that any location can use to define one of its services.
model Service {
	id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

	// TODO Refine Service model
	displayName String

	/// The {@link Service} icon defined as an iconify id (ex: lucide:shopping-cart).
	icon String

	/// The {@link Service} creation date.
	createdAt DateTime @default(now())
	/// The {@link Service} last update date.
	updatedAt DateTime @default(now()) @updatedAt

	locations LocationService[]

	@@unique([displayName])
}

/// The {@link Location} {@link Service} that specify the desired info.
model LocationService {
	id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

	/// The {@link Location} id.
	locationId String @db.Uuid
	/// The {@link Service} id.
	serviceId  String @db.Uuid

	/// The {@link LocationService} creation date.
	createdAt DateTime @unique @default(now())
	/// The {@link LocationService} last update date.
	updatedAt DateTime @default(now()) @updatedAt

	location Location @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
	service  Service  @relation(fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

/// The {@link User} and {@link Location} pivot table that contians specific data for these models, such as favorite locations.
model UserLocationData {
	id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

	/// The {@link User} id.
	userId     String @db.Uuid
	/// The {@link Location} id.
	locationId String @db.Uuid

	/// If the location is flgged as favorite for the user.
	isFavorite Boolean

	createdAt DateTime @default(now())
	updatedAt DateTime @default(now()) @updatedAt

	user     User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
	location Location @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)

	@@unique([userId, locationId])
	@@index(userId)
	@@index(locationId)
}

enum OrderType {
	NONE
}

enum OrderPaymentType {
	STRIPE
	PAYPAL
	WIRE_TRANSFER
	CRYPTO
	CUSTOM
}

enum OrderPaymentStatus {
	UNPAID
	PAID
	REFUNDED
}

enum OrderStatus {
	PENDING
	CLOSED
}

model Order {
	id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

	/// Auto increment order id
	orderId Int @unique @default(autoincrement())

	// stripeSessionId String? @unique

	/// The {@link User} that have made the order.
	userId String @db.Uuid

	// the name of the order
	name String

	// currency Currency

	// isSuspended Boolean @default(false)

	closedAt DateTime?

	paymentType   OrderPaymentType
	paymentStatus OrderPaymentStatus

	type   OrderType
	status OrderStatus

	createdAt DateTime  @unique @default(now())
	updatedAt DateTime  @default(now()) @updatedAt
	deletedAt DateTime?

	user User @relation("Bought", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

	// trackingData OrderTrackingData?

	billing  OrderBillingData?
	shipping OrderShippingData?

	notes OrderNote[]
	// installments OrderInstallment[]

	reservation Reservation?
	// subscriptionUnlocked Subscription[]

	// @@index(sellerId)
	@@index(userId)
	// @@index(checkoutId)
}

model OrderNote {
	id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

	orderId String @db.Uuid

	/// The {@link User} that have made the note.
	userId String @db.Uuid

	note String

	createdAt DateTime  @default(now())
	updatedAt DateTime  @default(now()) @updatedAt
	deletedAt DateTime?

	order Order @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
	user  User  @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

	@@index(orderId)
	@@index(userId)
}

model OrderBillingData {
	id String @id @db.Uuid

	/// Ragione Sociale
	businessName String

	/// Partita IVA (optional)
	vat String

	/// Codice Fiscale
	taxCode String

	/// Via, street
	street String

	/// Città
	city String

	/// Provincia / Stato Estero
	state String

	/// CAP
	postalCode String

	/// Paese
	country String

	createdAt DateTime @default(now())

	order Order @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model OrderShippingData {
	id String @id @db.Uuid

	firstName  String
	lastName   String
	street     String
	city       String
	state      String
	postalCode String
	country    String

	createdAt DateTime @default(now())

	order Order @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Reservation {
	id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

	userId     String  @db.Uuid
	locationId String  @db.Uuid
	orderId    String? @db.Uuid

	checkIn  DateTime
	checkOut DateTime

	createdAt DateTime @default(now())

	user     User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
	location Location @relation(fields: [locationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
	order    Order?   @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)

	// @@unique([userId, locationId])
	@@unique([orderId])
	@@index(userId)
	@@index(locationId)
}
